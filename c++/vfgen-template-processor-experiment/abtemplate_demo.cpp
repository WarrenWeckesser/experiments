#include <fstream>
#include <string>
#include <vector>

#include "simple_array.h"
#include "abtemplate.h"

using namespace std;


int main(int argc, char *argv[])
{
    symbol_table_t table{
        {"NAME",
         make_scalar_array("testcase"s)},
        {"INDVAR",
         make_scalar_array("t"s)},
        {"CONSTANT_NAMES",
         make_1d_array(vector<string>{"g", "pi", "Zero"})},
        {"CONSTANT_VALUES",
         make_1d_array(vector<string>{"9.81", "3.14159265", "0"})},
        {"PARAMETER_NAMES",
         make_1d_array(vector<string>{"alpha", "beta"})},
        {"EXPRESSION_NAMES",
         make_1d_array(vector<string>{"alphaSI", "betaI"})},
        {"EXPRESSION_VALUES",
         make_1d_array(vector<string>{"alpha*S*I_", "beta*I_"})},
        {"NV",
         make_scalar_array("3"s)},
        {"NP",
         make_scalar_array("3"s)},
        {"STATE_NAMES",
         make_1d_array(vector<string>{"S", "I_", "R"})},
        {"FORMULAS",
         make_1d_array(vector<string>{"-alphaSI", "alphaSI - betaI", "betaI"})},

        {"JAC",
         SimpleArray{shape_t{3, 3},
                     vector<string>{"-alpha*I_", "-S*alpha", "0.0D0",
                                    "alpha*I_", "alpha*S - beta", "0.0D0",
                                    "0.0D0", "beta", "0.0D0"}}},
        {"JACP",
         SimpleArray{shape_t{3, 3},
                     vector<string>{"AAA", "BBB", "CCC",
                                    "DDD", "EEE", "FFF",
                                    "GGG", "HHH", "III"}}},
        {"JACT",
         make_1d_array(vector<string>{"0.0", "0.0", "0.0"})},
        {"FUNCTION_NAMES",
         make_1d_array(vector<string>{"Ivalue", "sum"})},
        {"FUNCTION_FORMULAS",
         make_1d_array(vector<string>{"I_", "S + I_ + R"})},
        {"HEADER_COMMENTS",
         make_1d_array(vector<string>{
            "This file was generated by the program VFGEN, version: 2.6.0.dev4",
            "Generated on 12-Sep-2024 at 10:27"})}
    };

    string template_text;

    if (argc != 3) {
        cerr << "use: abtemplate_demo template_filename index_start" << endl;
        cerr << endl;
        cerr << "index_start must be 0 or 1." << endl;
        return 1;
    }
    ifstream infile{argv[1], ios::in};
    if (!infile.is_open()) {
        cerr << "Error: failed to open the file '" << argv[1] << "'" << endl; 
        return 1;
    }
    std::stringstream sstr;
    infile >> std::noskipws >> sstr.rdbuf();
    template_text = sstr.str();

    size_t index_start;
    string index_start_str = string{argv[2]};
    if (index_start_str == "0") {
        index_start = 0;
    }
    else if (index_start_str == "1") {
        index_start = 1;
    }
    else {
        cerr << "index_start must be 0 or 1." << endl;
        return 1;
    }

    string expanded = expand(template_text, "{@", "@}", "{{", "}}", table, index_start);
    printf("-----\n");
    printf("%s", expanded.c_str());
    printf("-----\n");
}
